project.description = 'GeoGeobra'

apply from: 'gradle-scripts/dependencies.gradle'

subprojects {
	apply plugin: 'eclipse'
	apply plugin: 'java'
	apply plugin: 'idea'

	eclipse.project {
		natures 'org.springsource.ide.eclipse.gradle.core.nature'
	}

	// add auto formatter to every project
	task eclipseJdtPrepare(type: Copy) {
		description 'Copies Eclipse jdt.core preference file.'
		from rootProject.file('eclipse/org.eclipse.jdt.core.prefs')
		into project.file('.settings/')
		outputs.upToDateWhen { false }
	}

	task eclipseJdtUi(type: Copy) {
		description 'Copies Eclipse jdt.ui preference file.'
		from rootProject.file('eclipse/org.eclipse.jdt.ui.prefs')
		into project.file('.settings/')
		outputs.upToDateWhen { false }
	}

	task cleanEclipseJdtUi(type: Delete) {
		description 'Cleans Eclipse jdt.ui preference file.'
		delete project.file('.settings/org.eclipse.jdt.ui.prefs')
	}

	tasks['eclipseJdt'].dependsOn(eclipseJdtPrepare)
	tasks['cleanEclipse'].dependsOn(cleanEclipseJdtUi)
	tasks['eclipse'].dependsOn(eclipseJdtPrepare, eclipseJdtUi, cleanEclipse)

	afterEvaluate {
		// forward command line properties to every test JVM
		tasks.withType(Test.class).each { task ->
			project.properties.each { prop, val ->
				if (val instanceof String) {
					task.systemProperty prop.trim(), val
				}
			}
		}
		tasks.matching {it.class.name.contains('SpotBugs')}.each {
			it.reports { xml.enabled = true }
		}
	}
}

wrapper {
	gradleVersion = gradleVersionGGB
}

// eclipse related tasks
project(':editor-base') {
	
	cleanEclipse.dependsOn('cleanJavacc')
	eclipseClasspath.dependsOn('compileJavacc')

	eclipse.project {
		natures 'sf.eclipse.javacc.javaccnature'
	}
}

project(':common') {
	
	cleanEclipse.dependsOn('cleanJavacc')
	eclipseClasspath.dependsOn('compileJavacc')

	eclipse.project {
 		natures 'sf.eclipse.javacc.javaccnature'
	}
}

// https://gist.github.com/mashimom/891a55878eda510d316e
if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
	  options.addStringOption('tag', 'example:X')
    }
  }
}
